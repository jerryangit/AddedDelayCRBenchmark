        # #! Remove later
        # if 1==0:
        #     import matplotlib.pyplot as plt
        #     plt.figure(2)
        #     plt.clf()
        #     for cell in egoX.cr.cd.traj.keys():
        #         (sIn,sOut) = egoX.cr.cd.sTCL.get(cell) 
        #         (tIn,tOut) = egoX.cr.cd.traj.get(cell)
        #         plt.plot(tIn,sIn,'r<')
        #         plt.plot(tOut,sOut,'b>')
        #         plt.plot([tIn,tOut],[sIn,sOut],'--')
        #     plt.plot(worldX.tick.timestamp.elapsed_seconds,egoX.sTraversed,'gx')
        #     plt.vlines(worldX.tick.timestamp.elapsed_seconds,0,60)
        #     plt.vlines(worldX.tick.timestamp.elapsed_seconds+N*egoX.dt,0,60)
        #     plt.xlim(left=0)
        #     plt.xlim(right=40)
        #     plt.title(str(egoX.id))                
        #     plt.show(block=False)
        #     plt.pause(0.001)
        # #! remove later


    def doubleS(self):
        # Double integrator for x,y
        # States:   [x,xdot,y,ydot]'  
        # Input:    [xddot,yddot]'
        A = np.array([[0,1,0,0],[0,0,0,0],[0,0,0,1],[0,0,0,0]])
        B = np.array([[0,0],[1,0],[0,0],[0,1]])
        C = np.array([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])
        D = np.array([[0,0],[0,0],[0,0],[0,0]])
        self.ss = scipy.signal.StateSpace(A,B,C,D)

    def unicycle(self):
        # Unicycle Model
        # States:   [x,y,theta]'  
        # Input:    [v,thetadot]'
        theta = 0   # !Linearized! around theta = 0, fix later
        A = np.array([[0,0,0],[0,0,0],[0,0,0]])
        B = np.array([[np.cos(theta),0],[np.sin(theta),0],[0,1]])
        C = np.array([[1,0,0],[0,1,0],[0,0,1]])
        D = np.array([[0,0],[0,0],[0,0]])
        self.ss = scipy.signal.StateSpace(A,B,C,D)

    def bicycle(self):
        #>>>>>>>>TODO<<<<<<<<<<
        # Double integrator for x,y
        # States:   [x,xdot,y,ydot]'  
        # Input:    [xddot,yddot]'
        A = np.array([[0,1,0,0],[0,0,0,0],[0,0,0,1],[0,0,0,0]])
        B = np.array([[0,0],[1,0],[0,0],[0,1]])
        C = np.array([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])
        D = np.array([[0,0],[0,0],[0,0],[0,0]])
        self.ss = scipy.signal.StateSpace(A,B,C,D)
        

